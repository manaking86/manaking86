<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>page</title>
      <link href="/2022/10/30/page-1/"/>
      <url>/2022/10/30/page-1/</url>
      
        <content type="html"><![CDATA[<p>#2022年10月30日#</p><p>##变量绑定与解构##</p><ol><li>变量命名。没啥其他区别，不能命名成关键字</li><li>变量绑定。let a = “……..”，所有权</li><li>变量可变性。默认情况下是不可变的，可以用mut，let mut a = *，这个时候a就可以（明着）变；</li><li>忽略未使用变量。当你命名了一个变量，但是却不用，记得在前面加个_下划线</li><li>变量遮蔽。可以多次let x ，会把之前的覆盖掉。但要注意变量的类型。在当前的花括号作用域内，对之前的x进行遮蔽</li><li>常量。常量用const来声明，并且值的类型必须标注。如<br> const MAX_POINTS: u32 = 100_000；</li></ol><p>##基本类型##<br>1.数值类型。<br><img src="https://static01.imgkr.com/temp/a5ae960419ad42a1a6c7db22c341cf0c.png" alt="数值类型"><br>运算符说明<br>*&amp; 位与相同位置均为1时则为1，否则为0<br>*| 位或相同位置只要有1时则为1，否则为0<br>*^ 异或相同位置不相同则为1，相同则为0<br>*! 位非把位中的0和1相互取反，即0置为1，1置为0<br>*&lt;&lt; 左移所有位向左移动指定位数，右位补零<br>*&gt;&gt; 右移所有位向右移动指定位数，左位补零<br>2.字符、布尔、单元类型。颜文字也是字符，字符只能用 ‘’ 来表示， “” 是留给字符串的<br>布尔（true false）<br>单元类型。（）这就是单元类型，常见的 println!() 的返回值也是单元类型 ()。<br>3.语句和表达式<br>Rust 的函数体是由一系列语句组成，最后由一个表达式来返回值，这种基于语句（statement）和表达式（expression）的方式是非常重要的，要能明确的区分这两个概念<br>语句：let a = 8;<br>表达式会进行求值，然后返回一个值，表达式不能包含分号。表达式如果不返回任何值，会隐式地返回一个 ()<br>4.函数。<br>函数名和变量名使用蛇形命名法(snake case)，例如 fn add_two() -&gt; {}<br>函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可<br>每个函数参数都需要标注类型<br>因此我们可以把函数的返回值直接赋给调用者。</p><p>*函数返回：函数的返回值就是函数体最后一条表达式的返回值，当然我们也可以使用 return 提前返回，</p><p>##所有权和借用##<br>rust通过所有权来管理内存，编译器在编译时会根据一系列规则进行检查<br>这种检查只发生在编译期，因此对于程序运行期，不会有任何性能上的损失。<br>*1.Rust 中每一个值都被一个变量所拥有，该变量被称为值的所有者<br>*2.一个值同时只能被一个变量所拥有，或者说一个值只能拥有一个所有者<br>*3.当所有者(变量)离开作用域范围时，这个值将被丢弃(drop)</p><p>:: 是一种调用操作符</p><p>Rust通过借用(Borrowing) 来获取变量的引用，称之为借用(borrowing)。<br>&amp; 符号即是引用，它们允许你使用值，但是不获取所有权<br>加个mut，变成&amp;mut就是可变引用。可变引用同时只能存在一个</p><p>##复合类型##<br>字符串和切片、元组、结构体、枚举、数组</p><p>结构体 struct<br>一个结构体由几部分组成：<br>1、通过关键字 struct 定义<br>2、一个清晰明确的结构体 名称<br>3、几个有名字的结构体 字段<br>    struct User {<br>    active: bool,<br>    username: String,<br>    email: String,<br>    sign_in_count: u64,<br>    }</p><p>枚举(enum 或 enumeration)允许你通过列举可能的成员来定义一个枚举类型</p><p>在 Rust 中，最常用的数组有两种，第一种是速度很快但是长度固定的 array，第二种是可动态增长的但是有性能损耗的 Vector，在本书中，我们称 array 为数组，Vector 为动态数组。</p><p>##流程控制##</p><p>if….else  elseif  for、while 和 loop<br>使用 continue 可以跳过当前当次的循环<br>使用 break 可以直接跳出当前整个循环</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>page</title>
      <link href="/2022/10/23/page/"/>
      <url>/2022/10/23/page/</url>
      
        <content type="html"><![CDATA[<p>#2022-10-23学习日记</p><p>学习计划：<br>1、编程：rust、python（数据分析）<br>2、英语<br>3、动画建模<br>4、画画，音乐</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/22/hello-world/"/>
      <url>/2022/10/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to 你好啊<a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
